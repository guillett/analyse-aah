{"version":3,"file":"static/webpack/static/development/pages/graphique.js.1a39756a5cf8b283cc36.hot-update.js","sources":["webpack:///./pages/graphique.js"],"sourcesContent":["import {useState, useCallback, useEffect, Component} from 'react'\nimport fetch from 'isomorphic-unfetch'\nimport lib from '../lib'\nimport * as d3 from \"d3\"\n\nimport iFrameResize from 'iframe-resizer/js/iframeResizer.contentWindow'\n\nfunction getProps() {\n    const queryString = (window.document.location.search || '')\n    const params = queryString.replace('?', '').split('&').reduce((params, tuple) => {\n        const pair = tuple.split('=')\n\n        params[pair[0]] = decodeURI(pair[1])\n        return params\n    }, {})\n\n    const props = { source: params.source || 'static/full.json' }\n    return props\n}\n\nfunction fetchData(source) {\n    return fetch(source)\n    .then(response => response.json())\n}\n\nconst colors = d3.scaleOrdinal(d3.schemeCategory10)\n\nfunction Graphique () {\n    const [source, setSource] = useState()\n    const [payload, setPayload] = useState()\n    const [names, setNames] = useState([])\n    const [currentValues, setCurrentValues] = useState([])\n\n    d3.formatDefaultLocale({\n        \"decimal\": \",\",\n        \"thousands\": \"\\u00a0\",\n        \"grouping\": [3],\n        \"currency\": [\"\", \"\\u00a0€\"],\n        \"percent\": \"\\u202f%\"\n    })\n    const format = d3.format(\"$,d\")\n\n    var margin = {top: 10, right: 10, bottom: 20, left: 40}\n    var height = 300\n    var width = 950\n\n    useEffect(() => {\n        const {source} = getProps()\n        setSource(source)\n\n        fetchData(source)\n        .then(payload => {\n            setPayload(payload)\n\n            var data = payload.data\n            lib.preprocess(data)\n            var keys = lib.getRelevantSeries(data)\n            lib.computeTotal(data, keys)\n\n            keys.sort(lib.itemComparator)\n            setNames(['total'].concat(keys))\n\n            var series = d3.stack().keys(keys).offset(d3.stackOffsetDiverging)(data)\n\n            var x = d3.scaleBand()\n              .domain(data.map(d => d.name))\n              .range([margin.left, width - margin.right])\n              .padding(0.01)\n\n            var y = d3.scaleLinear()\n              .domain([d3.min(series, d => d3.min(d, d => d[0])), d3.max(series, d => d3.max(d, d => d[1]))])\n              .rangeRound([height - margin.bottom, margin.top])\n\n            var xAxis = g => g\n              .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n              .call(d3.axisBottom(x).tickValues(data.map(function(d) {\n                var v = parseInt(d.salaire_net)\n                return v % 250 === 0 ? v : ''\n              })).tickSizeOuter(0))\n              .call(g => g.selectAll(\".domain\").remove())\n\n            var yAxis = g => g\n              .attr(\"transform\", `translate(${margin.left},0)`)\n              .call(d3.axisLeft(y))\n              .call(g => g.selectAll(\".domain\").remove())\n\n\n            var svg = d3.select(\"#svg\")\n               .attr(\"viewBox\", [0, 0, width, height]);\n\n            svg.append(\"g\")\n              .selectAll(\"g\")\n              .data(series)\n              .join(\"g\")\n                .attr(\"fill\", d => colors(d.key))\n              .selectAll(\"rect\")\n              .data(d => d)\n              .join(\"rect\")\n                .attr(\"x\", (d, i) => x(d.data.name))\n                .attr(\"y\", d => y(d[1]))\n                .attr(\"height\", d => y(d[0]) - y(d[1]))\n                .attr(\"width\", x.bandwidth())\n                .on(\"mouseover\", function(_, index) {\n                    setCurrentValues(data[index])\n                })\n\n            svg.append(\"g\")\n              .call(xAxis);\n\n            svg.append(\"g\")\n              .call(yAxis);\n        })\n    }, [])\n\n    return (\n        <div>\n            <title>Décomposition du revenu disponible en fonction du salaire net</title>\n            <h1 id=\"title\">Décomposition du revenu disponible en fonction du salaire net</h1>\n            <div id=\"legend\">{\n                names.map(n => (\n                    <div key={n}>\n                        <span style={{color: colors(n)}}>◼</span>&nbsp;{n}\n                        {currentValues && currentValues[n] !== undefined && (' ' + format(currentValues[n]))}\n                    </div>\n                ))\n            }</div>\n            <svg id=\"svg\"></svg>\n            <div><a\n                target=\"_blank\"\n                rel=\"noopener\"\n                href={source}>Source\n            </a></div>\n        </div>\n    );\n}\n\nexport default Graphique;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AANA;AACA;AAOA;AAAA;AAGA;AAAA;AAHA;AACA;AAKA;AAGA;AAIA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;A","sourceRoot":""}