{"version":3,"file":"static/webpack/static/development/pages/graphique.js.40ae9ed9af954cf6ba36.hot-update.js","sources":["webpack:///./pages/graphique.js"],"sourcesContent":["import {useState, useCallback, useEffect, Component} from 'react'\nimport fetch from 'isomorphic-unfetch'\nimport lib from '../lib'\nimport * as d3 from \"d3\"\nimport { ResponsiveLine } from '@nivo/line'\n\nimport 'iframe-resizer/js/iframeResizer.contentWindow'\n\nconst MyResponsiveLine = ({ data /* see data tab */ }) => (\n    <ResponsiveLine\n        data={data}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{ type: 'linear' }}\n        yScale={{ type: 'linear', min: 0, max: 'auto', reverse: false }}\n        yFormat=\" >-.2f\"\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Graphique',\n            legendOffset: 36,\n            legendPosition: 'middle'\n        }}\n        axisLeft={{\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'count',\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        enablePoints={false}\n        pointSize={10}\n        lineWidth={4}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabelYOffset={-12}\n        useMesh={true}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n)\n\nfunction getProps() {\n    const queryString = (window.document.location.search || '')\n    const params = queryString.replace('?', '').split('&').reduce((params, tuple) => {\n        const pair = tuple.split('=')\n\n        params[pair[0]] = decodeURI(pair[1])\n        return params\n    }, {})\n\n    const props = Object.assign({source: 'static/full.json'}, params)\n    return props\n}\nconst colors = d3.scaleOrdinal(d3.schemeCategory10)\n\nfunction Graphique () {\n    const [source, setSource] = useState()\n    const [payload, setPayload] = useState()\n    const [data, setData] = useState([])\n    const [names, setNames] = useState([])\n    const [cData, setCData] = useState([])\n    const [taxData, setTaxData] = useState([])\n    const [currentValues, setCurrentValues] = useState([])\n\n    const [abat_forf, setAbat_forf] = useState(0)\n    const [abat_forf_enf, setAbat_forf_enf] = useState(0)\n    const [prog_abat, setProg_abat] = useState(0)\n    const [deconj, setDeconj] = useState(false)\n\n\n    function fetchData(source) {\n        const prs = getProps()\n        var items = [\n            [\"aah_abattement_forfaitaire_amendement\", prs.a],\n            [\"aah_abattement_forfaitaire_enf\", prs.b],\n            [\"aah_niveau_smic_abattement_conjoint\", prs.c],\n            [\"aah_deconjugalise\", prs.d],\n            [\"aah_maj_conj\", prs.e]\n        ]\n        var suffix = \"\"\n        items.forEach(t => {\n            if (t[1]) {\n                suffix += t[0] + \"=\" + t[1]\n            }\n        })\n        const url = source + \"?\" + suffix\n        setSource(url)\n        return fetch(url)\n        .then(response => response.json())\n    }\n\n    d3.formatDefaultLocale({\n        \"decimal\": \",\",\n        \"thousands\": \"\\u00a0\",\n        \"grouping\": [3],\n        \"currency\": [\"\", \"\\u00a0€\"],\n        \"percent\": \"\\u202f%\"\n    })\n    const format = d3.format(\"$,d\")\n\n    var margin = {top: 10, right: 10, bottom: 20, left: 40}\n    var height = 300\n    var width = 950\n\n    useEffect(() => {\n        const r = data.map(p => {\n            return {x: p.name, y: p.total}\n        })\n        setCData([{\n            \"id\": \"total\",\n            \"data\": r\n        }])\n        const t = r.reduce((a, v) => {\n            const p = a[a.length - 1] || { x: 0, base: 0}\n            a.push({\n                x: v.x,\n                y: 1 - (v.y - p.base)/(v.x - p.x),\n                base: v.y\n            })\n            return a\n        }, []).slice(1)\n        setTaxData([{\n            \"id\": \"total\",\n            \"data\": t\n        }])\n    }, [data])\n\n    useEffect(() => {\n        const {source} = getProps()\n\n        fetchData(source)\n        .then(payload => {\n            setPayload(payload)\n\n            var rawData = payload.data\n            lib.preprocess(rawData)\n            var keys = lib.getRelevantSeries(rawData)\n            lib.computeTotal(rawData, keys)\n\n            setData(rawData)\n\n            keys.sort(lib.itemComparator)\n            setNames(['total'].concat(keys))\n\n            var series = d3.stack().keys(keys).offset(d3.stackOffsetDiverging)(rawData)\n\n            var x = d3.scaleBand()\n              .domain(rawData.map(d => d.name))\n              .range([margin.left, width - margin.right])\n              .padding(0.01)\n\n            var y = d3.scaleLinear()\n              .domain([d3.min(series, d => d3.min(d, d => d[0])), d3.max(series, d => d3.max(d, d => d[1]))])\n              .rangeRound([height - margin.bottom, margin.top])\n\n            var xAxis = g => g\n              .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n              .call(d3.axisBottom(x).tickValues(rawData.map(function(d) {\n                var v = parseInt(d.salaire_net)\n                return v % 250 === 0 ? v : ''\n              })).tickSizeOuter(0))\n              .call(g => g.selectAll(\".domain\").remove())\n\n            var yAxis = g => g\n              .attr(\"transform\", `translate(${margin.left},0)`)\n              .call(d3.axisLeft(y))\n              .call(g => g.selectAll(\".domain\").remove())\n\n\n            var svg = d3.select(\"#svg\")\n               .attr(\"viewBox\", [0, 0, width, height]);\n\n            svg.append(\"g\")\n              .selectAll(\"g\")\n              .data(series)\n              .join(\"g\")\n                .attr(\"fill\", d => colors(d.key))\n              .selectAll(\"rect\")\n              .data(d => d)\n              .join(\"rect\")\n                .attr(\"x\", (d, i) => x(d.data.name))\n                .attr(\"y\", d => y(d[1]))\n                .attr(\"height\", d => y(d[0]) - y(d[1]))\n                .attr(\"width\", x.bandwidth())\n                .on(\"mouseover\", function(_, index) {\n                    setCurrentValues(rawData[index])\n                })\n\n            svg.append(\"g\")\n              .call(xAxis);\n\n            svg.append(\"g\")\n              .call(yAxis);\n        })\n    }, [abat_forf, abat_forf_enf, prog_abat, deconj])\n\n    var to64 = typeof btoa == \"undefined\" ? e => Buffer.from(e).toString('base64') : btoa\n\n    return (\n        <div>\n            <title>Décomposition du revenu disponible en fonction du salaire net</title>\n            <input type=\"checkbox\" onClick={e => setAbat_forf(e.target.value ? 5000 : 0 )}/>\n            <input type=\"checkbox\" onClick={e => setAbat_forf(e.target.value ? 1100 : 0 )}/>\n            <input type=\"checkbox\" onClick={e => setProg_abat(e.target.value ? 1100 : 0 )}/>\n            <input type=\"checkbox\" onClick={e => setDeconj(e.target.value ? 1 : 0 )}/>\n\n            \n            <h1 id=\"title\">Décomposition du revenu disponible en fonction du salaire net</h1>\n            <div id=\"legend\">{\n                names.map(n => (\n                    <div key={n}>\n                        <span style={{color: colors(n)}}>◼</span>&nbsp;{n}\n                        {currentValues && currentValues[n] !== undefined && (' ' + format(currentValues[n]))}\n                    </div>\n                ))\n            }</div>\n            <svg id=\"svg\"></svg>\n            <div><a\n                target=\"_blank\"\n                rel=\"noopener\"\n                href={source}>Lien\n            </a> <a\n                download=\"data.json\"\n                href={\"data:application/json;base64,\"+btoa(JSON.stringify(payload))}>Données\n            </a></div>\n\n            <div style={{height: '400px', width: '100%'}}>\n                {MyResponsiveLine({data: cData })}\n            </div>\n\n            <div style={{height: '400px', width: '100%'}}>\n                {MyResponsiveLine({data: taxData })}\n            </div>\n        </div>\n    );\n}\n\nexport default Graphique;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAFA;AAfA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AA+DA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AANA;AACA;AAOA;AAAA;AAGA;AAAA;AAHA;AACA;AAKA;AAGA;AAIA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;;;;;A","sourceRoot":""}